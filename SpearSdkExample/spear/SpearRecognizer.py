# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SpearRecognizer', [dirname(__file__)])
        except ImportError:
            import _SpearRecognizer
            return _SpearRecognizer
        if fp is not None:
            try:
                _mod = imp.load_module('_SpearRecognizer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SpearRecognizer = swig_import_helper()
    del swig_import_helper
else:
    import _SpearRecognizer
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SpearRecognizerCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpearRecognizerCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpearRecognizerCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _SpearRecognizer.delete_SpearRecognizerCallback
    __del__ = lambda self: None

    def onCommitResult(self, userdata_v, tam_nbest_results):
        return _SpearRecognizer.SpearRecognizerCallback_onCommitResult(self, userdata_v, tam_nbest_results)

    def __init__(self):
        if self.__class__ == SpearRecognizerCallback:
            _self = None
        else:
            _self = self
        this = _SpearRecognizer.new_SpearRecognizerCallback(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _SpearRecognizer.disown_SpearRecognizerCallback(self)
        return weakref_proxy(self)
SpearRecognizerCallback_swigregister = _SpearRecognizer.SpearRecognizerCallback_swigregister
SpearRecognizerCallback_swigregister(SpearRecognizerCallback)

class TAMTranscriptionPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TAMTranscriptionPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TAMTranscriptionPair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["transcription"] = _SpearRecognizer.TAMTranscriptionPair_transcription_set
    __swig_getmethods__["transcription"] = _SpearRecognizer.TAMTranscriptionPair_transcription_get
    if _newclass:
        transcription = _swig_property(_SpearRecognizer.TAMTranscriptionPair_transcription_get, _SpearRecognizer.TAMTranscriptionPair_transcription_set)
    __swig_setmethods__["cost"] = _SpearRecognizer.TAMTranscriptionPair_cost_set
    __swig_getmethods__["cost"] = _SpearRecognizer.TAMTranscriptionPair_cost_get
    if _newclass:
        cost = _swig_property(_SpearRecognizer.TAMTranscriptionPair_cost_get, _SpearRecognizer.TAMTranscriptionPair_cost_set)

    def __init__(self, transcription, cost):
        this = _SpearRecognizer.new_TAMTranscriptionPair(transcription, cost)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _SpearRecognizer.delete_TAMTranscriptionPair
    __del__ = lambda self: None
TAMTranscriptionPair_swigregister = _SpearRecognizer.TAMTranscriptionPair_swigregister
TAMTranscriptionPair_swigregister(TAMTranscriptionPair)

class TAMNBestTranscriptionResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TAMNBestTranscriptionResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TAMNBestTranscriptionResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["transcriptionPairs"] = _SpearRecognizer.TAMNBestTranscriptionResult_transcriptionPairs_set
    __swig_getmethods__["transcriptionPairs"] = _SpearRecognizer.TAMNBestTranscriptionResult_transcriptionPairs_get
    if _newclass:
        transcriptionPairs = _swig_property(_SpearRecognizer.TAMNBestTranscriptionResult_transcriptionPairs_get, _SpearRecognizer.TAMNBestTranscriptionResult_transcriptionPairs_set)
    __swig_setmethods__["size"] = _SpearRecognizer.TAMNBestTranscriptionResult_size_set
    __swig_getmethods__["size"] = _SpearRecognizer.TAMNBestTranscriptionResult_size_get
    if _newclass:
        size = _swig_property(_SpearRecognizer.TAMNBestTranscriptionResult_size_get, _SpearRecognizer.TAMNBestTranscriptionResult_size_set)

    def __init__(self, *args):
        this = _SpearRecognizer.new_TAMNBestTranscriptionResult(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _SpearRecognizer.delete_TAMNBestTranscriptionResult
    __del__ = lambda self: None
TAMNBestTranscriptionResult_swigregister = _SpearRecognizer.TAMNBestTranscriptionResult_swigregister
TAMNBestTranscriptionResult_swigregister(TAMNBestTranscriptionResult)

class TAMVADPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TAMVADPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TAMVADPair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flag"] = _SpearRecognizer.TAMVADPair_flag_set
    __swig_getmethods__["flag"] = _SpearRecognizer.TAMVADPair_flag_get
    if _newclass:
        flag = _swig_property(_SpearRecognizer.TAMVADPair_flag_get, _SpearRecognizer.TAMVADPair_flag_set)
    __swig_setmethods__["duration"] = _SpearRecognizer.TAMVADPair_duration_set
    __swig_getmethods__["duration"] = _SpearRecognizer.TAMVADPair_duration_get
    if _newclass:
        duration = _swig_property(_SpearRecognizer.TAMVADPair_duration_get, _SpearRecognizer.TAMVADPair_duration_set)

    def __init__(self, flag, duration):
        this = _SpearRecognizer.new_TAMVADPair(flag, duration)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _SpearRecognizer.delete_TAMVADPair
    __del__ = lambda self: None
TAMVADPair_swigregister = _SpearRecognizer.TAMVADPair_swigregister
TAMVADPair_swigregister(TAMVADPair)


_SpearRecognizer.TAM_INDEPENDENT_swigconstant(_SpearRecognizer)
TAM_INDEPENDENT = _SpearRecognizer.TAM_INDEPENDENT

_SpearRecognizer.TAM_MALE_swigconstant(_SpearRecognizer)
TAM_MALE = _SpearRecognizer.TAM_MALE

_SpearRecognizer.TAM_FEMALE_swigconstant(_SpearRecognizer)
TAM_FEMALE = _SpearRecognizer.TAM_FEMALE

_SpearRecognizer.TAM_16K_swigconstant(_SpearRecognizer)
TAM_16K = _SpearRecognizer.TAM_16K

_SpearRecognizer.TAM_8K_swigconstant(_SpearRecognizer)
TAM_8K = _SpearRecognizer.TAM_8K

_SpearRecognizer.TAM_UNREGISTERED_swigconstant(_SpearRecognizer)
TAM_UNREGISTERED = _SpearRecognizer.TAM_UNREGISTERED

_SpearRecognizer.TAM_REGISTERED_swigconstant(_SpearRecognizer)
TAM_REGISTERED = _SpearRecognizer.TAM_REGISTERED

_SpearRecognizer.TAM_EXPIRED_swigconstant(_SpearRecognizer)
TAM_EXPIRED = _SpearRecognizer.TAM_EXPIRED

def tamInit(dataDirectory):
    return _SpearRecognizer.tamInit(dataDirectory)
tamInit = _SpearRecognizer.tamInit

def tamFree(arg1):
    return _SpearRecognizer.tamFree(arg1)
tamFree = _SpearRecognizer.tamFree

def tamCheckRegistration(arg1):
    return _SpearRecognizer.tamCheckRegistration(arg1)
tamCheckRegistration = _SpearRecognizer.tamCheckRegistration

def tamUpdateConfig(arg1, argv):
    return _SpearRecognizer.tamUpdateConfig(arg1, argv)
tamUpdateConfig = _SpearRecognizer.tamUpdateConfig

def tamProfileLoadUntrained(tam, arg2, arg3):
    return _SpearRecognizer.tamProfileLoadUntrained(tam, arg2, arg3)
tamProfileLoadUntrained = _SpearRecognizer.tamProfileLoadUntrained

def tamProfileFree(arg1):
    return _SpearRecognizer.tamProfileFree(arg1)
tamProfileFree = _SpearRecognizer.tamProfileFree

def tamGrammarLoad(grammarFilePath):
    return _SpearRecognizer.tamGrammarLoad(grammarFilePath)
tamGrammarLoad = _SpearRecognizer.tamGrammarLoad

def tamGrammarFree(arg1):
    return _SpearRecognizer.tamGrammarFree(arg1)
tamGrammarFree = _SpearRecognizer.tamGrammarFree

def tamGrammarCompile(tam, regularExpression):
    return _SpearRecognizer.tamGrammarCompile(tam, regularExpression)
tamGrammarCompile = _SpearRecognizer.tamGrammarCompile

def tamGrammarSave(grammar, grammarFilePath):
    return _SpearRecognizer.tamGrammarSave(grammar, grammarFilePath)
tamGrammarSave = _SpearRecognizer.tamGrammarSave

def tamRecognizerInit(tam, profile, grammar):
    return _SpearRecognizer.tamRecognizerInit(tam, profile, grammar)
tamRecognizerInit = _SpearRecognizer.tamRecognizerInit

def tamRecognizerFree(arg1):
    return _SpearRecognizer.tamRecognizerFree(arg1)
tamRecognizerFree = _SpearRecognizer.tamRecognizerFree

def tamRecognizerProcess(arg1, buffer, bufferLength, commit_callback, commit_userdata, intermediate_callback, intermediate_userdata, vad_callback, vad_userdata):
    return _SpearRecognizer.tamRecognizerProcess(arg1, buffer, bufferLength, commit_callback, commit_userdata, intermediate_callback, intermediate_userdata, vad_callback, vad_userdata)
tamRecognizerProcess = _SpearRecognizer.tamRecognizerProcess

def tamRecognizerStop(arg1, commit_callback, commit_userdata, vad_callback, vad_userdata):
    return _SpearRecognizer.tamRecognizerStop(arg1, commit_callback, commit_userdata, vad_callback, vad_userdata)
tamRecognizerStop = _SpearRecognizer.tamRecognizerStop

def tamRecognizerAbort(arg1):
    return _SpearRecognizer.tamRecognizerAbort(arg1)
tamRecognizerAbort = _SpearRecognizer.tamRecognizerAbort

def tamRecognizerChangeGrammar(arg1, grammar):
    return _SpearRecognizer.tamRecognizerChangeGrammar(arg1, grammar)
tamRecognizerChangeGrammar = _SpearRecognizer.tamRecognizerChangeGrammar

def tamGetLastError():
    return _SpearRecognizer.tamGetLastError()
tamGetLastError = _SpearRecognizer.tamGetLastError

def tamGetPronunciation(grammar):
    return _SpearRecognizer.tamGetPronunciation(grammar)
tamGetPronunciation = _SpearRecognizer.tamGetPronunciation

def tamAudioCheck(buffer, bufferLength):
    return _SpearRecognizer.tamAudioCheck(buffer, bufferLength)
tamAudioCheck = _SpearRecognizer.tamAudioCheck

def Initialize(dataDirectory):
    return _SpearRecognizer.Initialize(dataDirectory)
Initialize = _SpearRecognizer.Initialize

def Free(spear):
    return _SpearRecognizer.Free(spear)
Free = _SpearRecognizer.Free

def CheckRegistration(spear):
    return _SpearRecognizer.CheckRegistration(spear)
CheckRegistration = _SpearRecognizer.CheckRegistration

def UpdateConfig(spear, commands):
    return _SpearRecognizer.UpdateConfig(spear, commands)
UpdateConfig = _SpearRecognizer.UpdateConfig

def GetLastError():
    return _SpearRecognizer.GetLastError()
GetLastError = _SpearRecognizer.GetLastError

def ProfileLoadUntrained(spear, type, rate):
    return _SpearRecognizer.ProfileLoadUntrained(spear, type, rate)
ProfileLoadUntrained = _SpearRecognizer.ProfileLoadUntrained

def ProfileFree(profile):
    return _SpearRecognizer.ProfileFree(profile)
ProfileFree = _SpearRecognizer.ProfileFree

def RegisterVAD(window_size, smoothing_size, vad_over, silence_over, frame_report, debug):
    return _SpearRecognizer.RegisterVAD(window_size, smoothing_size, vad_over, silence_over, frame_report, debug)
RegisterVAD = _SpearRecognizer.RegisterVAD

def GrammarLoad(grammarDirectory):
    return _SpearRecognizer.GrammarLoad(grammarDirectory)
GrammarLoad = _SpearRecognizer.GrammarLoad

def GrammarFree(grammar):
    return _SpearRecognizer.GrammarFree(grammar)
GrammarFree = _SpearRecognizer.GrammarFree

def GrammarCompile(spear, regEx, type, rate, continuous):
    return _SpearRecognizer.GrammarCompile(spear, regEx, type, rate, continuous)
GrammarCompile = _SpearRecognizer.GrammarCompile

def GrammarSave(grammar, grammarDirectory):
    return _SpearRecognizer.GrammarSave(grammar, grammarDirectory)
GrammarSave = _SpearRecognizer.GrammarSave

def RecognizerInit(spear, profile, grammar, recMode):
    return _SpearRecognizer.RecognizerInit(spear, profile, grammar, recMode)
RecognizerInit = _SpearRecognizer.RecognizerInit

def RecognizerFree(rec):
    return _SpearRecognizer.RecognizerFree(rec)
RecognizerFree = _SpearRecognizer.RecognizerFree

def RecognizerInitContinuous(spear, profile, grammar, vadOptions, recMode):
    return _SpearRecognizer.RecognizerInitContinuous(spear, profile, grammar, vadOptions, recMode)
RecognizerInitContinuous = _SpearRecognizer.RecognizerInitContinuous

def RecognizerFreeContinuous(rec):
    return _SpearRecognizer.RecognizerFreeContinuous(rec)
RecognizerFreeContinuous = _SpearRecognizer.RecognizerFreeContinuous

def RecognizerProcess(rec, buffer):
    return _SpearRecognizer.RecognizerProcess(rec, buffer)
RecognizerProcess = _SpearRecognizer.RecognizerProcess

def RecognizerStop(rec):
    return _SpearRecognizer.RecognizerStop(rec)
RecognizerStop = _SpearRecognizer.RecognizerStop

def RecognizerContinuousProcess(rec, buffer, commit_callback):
    return _SpearRecognizer.RecognizerContinuousProcess(rec, buffer, commit_callback)
RecognizerContinuousProcess = _SpearRecognizer.RecognizerContinuousProcess

def RecognizerContinuousStop(rec, commit_callback, userdata):
    return _SpearRecognizer.RecognizerContinuousStop(rec, commit_callback, userdata)
RecognizerContinuousStop = _SpearRecognizer.RecognizerContinuousStop

def RecognizerContinuousAbort(rec):
    return _SpearRecognizer.RecognizerContinuousAbort(rec)
RecognizerContinuousAbort = _SpearRecognizer.RecognizerContinuousAbort

def GetPronunciation(grammar):
    return _SpearRecognizer.GetPronunciation(grammar)
GetPronunciation = _SpearRecognizer.GetPronunciation

def ChangeGrammar(rec, grammar):
    return _SpearRecognizer.ChangeGrammar(rec, grammar)
ChangeGrammar = _SpearRecognizer.ChangeGrammar

def GetSpearAsrVersion():
    return _SpearRecognizer.GetSpearAsrVersion()
GetSpearAsrVersion = _SpearRecognizer.GetSpearAsrVersion

def GetSpearAsrVersionMajor():
    return _SpearRecognizer.GetSpearAsrVersionMajor()
GetSpearAsrVersionMajor = _SpearRecognizer.GetSpearAsrVersionMajor

def GetSpearAsrVersionMinor():
    return _SpearRecognizer.GetSpearAsrVersionMinor()
GetSpearAsrVersionMinor = _SpearRecognizer.GetSpearAsrVersionMinor

def GetSpearAsrVersionPatch():
    return _SpearRecognizer.GetSpearAsrVersionPatch()
GetSpearAsrVersionPatch = _SpearRecognizer.GetSpearAsrVersionPatch

def AudioCheck(shorts, nshorts):
    return _SpearRecognizer.AudioCheck(shorts, nshorts)
AudioCheck = _SpearRecognizer.AudioCheck

def RecognizerContinuousProcess_wrapper(rec, buffer, handler):
    return _SpearRecognizer.RecognizerContinuousProcess_wrapper(rec, buffer, handler)
RecognizerContinuousProcess_wrapper = _SpearRecognizer.RecognizerContinuousProcess_wrapper
# This file is compatible with both classic and new-style classes.


