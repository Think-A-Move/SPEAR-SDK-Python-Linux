# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SpearWakeUp', [dirname(__file__)])
        except ImportError:
            import _SpearWakeUp
            return _SpearWakeUp
        if fp is not None:
            try:
                _mod = imp.load_module('_SpearWakeUp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SpearWakeUp = swig_import_helper()
    del swig_import_helper
else:
    import _SpearWakeUp
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SpearWakeUpResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpearWakeUpResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpearWakeUpResult, name)
    __repr__ = _swig_repr
    __swig_getmethods__["retval"] = _SpearWakeUp.SpearWakeUpResult_retval_get
    if _newclass:
        retval = _swig_property(_SpearWakeUp.SpearWakeUpResult_retval_get)
    __swig_getmethods__["deviation"] = _SpearWakeUp.SpearWakeUpResult_deviation_get
    if _newclass:
        deviation = _swig_property(_SpearWakeUp.SpearWakeUpResult_deviation_get)

    def __init__(self):
        this = _SpearWakeUp.new_SpearWakeUpResult()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _SpearWakeUp.delete_SpearWakeUpResult
    __del__ = lambda self: None
SpearWakeUpResult_swigregister = _SpearWakeUp.SpearWakeUpResult_swigregister
SpearWakeUpResult_swigregister(SpearWakeUpResult)

class SpearWakeUpEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpearWakeUpEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpearWakeUpEngine, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SpearWakeUp.new_SpearWakeUpEngine()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _SpearWakeUp.delete_SpearWakeUpEngine
    __del__ = lambda self: None

    def InitWithFst(self, model_dir, fst_file):
        return _SpearWakeUp.SpearWakeUpEngine_InitWithFst(self, model_dir, fst_file)

    def InitWithWakeword(self, model_dir, wake_word):
        return _SpearWakeUp.SpearWakeUpEngine_InitWithWakeword(self, model_dir, wake_word)

    def ProcessTask(self, package_buf, commit):
        return _SpearWakeUp.SpearWakeUpEngine_ProcessTask(self, package_buf, commit)

    def StopTask(self, commit):
        return _SpearWakeUp.SpearWakeUpEngine_StopTask(self, commit)
SpearWakeUpEngine_swigregister = _SpearWakeUp.SpearWakeUpEngine_swigregister
SpearWakeUpEngine_swigregister(SpearWakeUpEngine)


def getSpearWakeUpVersion():
    return _SpearWakeUp.getSpearWakeUpVersion()
getSpearWakeUpVersion = _SpearWakeUp.getSpearWakeUpVersion

def getSpearWakeUpVersionMajor():
    return _SpearWakeUp.getSpearWakeUpVersionMajor()
getSpearWakeUpVersionMajor = _SpearWakeUp.getSpearWakeUpVersionMajor

def getSpearWakeUpVersionMinor():
    return _SpearWakeUp.getSpearWakeUpVersionMinor()
getSpearWakeUpVersionMinor = _SpearWakeUp.getSpearWakeUpVersionMinor

def getSpearWakeUpVersionPatch():
    return _SpearWakeUp.getSpearWakeUpVersionPatch()
getSpearWakeUpVersionPatch = _SpearWakeUp.getSpearWakeUpVersionPatch
class SpearWakeUpCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpearWakeUpCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpearWakeUpCallback, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == SpearWakeUpCallback:
            _self = None
        else:
            _self = self
        this = _SpearWakeUp.new_SpearWakeUpCallback(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _SpearWakeUp.delete_SpearWakeUpCallback
    __del__ = lambda self: None

    def onCommitResult(self, arg0):
        return _SpearWakeUp.SpearWakeUpCallback_onCommitResult(self, arg0)

    def createWrapper(self):
        return _SpearWakeUp.SpearWakeUpCallback_createWrapper(self)
    def __disown__(self):
        self.this.disown()
        _SpearWakeUp.disown_SpearWakeUpCallback(self)
        return weakref_proxy(self)
SpearWakeUpCallback_swigregister = _SpearWakeUp.SpearWakeUpCallback_swigregister
SpearWakeUpCallback_swigregister(SpearWakeUpCallback)

# This file is compatible with both classic and new-style classes.


